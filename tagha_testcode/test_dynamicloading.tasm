$stacksize 16
$global module_str, 19, "test_factorial.tbc"
$global factorial_str, 10, "factorial"

; struct TaghaModule *tagha_module_new_from_file(const char filename[]);
$native %tagha_module_new_from_file

; int32_t tagha_module_call(struct TaghaModule *module, const char funcname[], size_t args, union TaghaVal params[], union TaghaVal *return_val);
$native %tagha_module_call

; bool tagha_module_free(struct TaghaModule **modref);
$native %tagha_module_free

$safe

%main: {
	movi		rgamal, 32
	sub			rsp, rgamal
	movi		rbeth, 10000000 #1000000000 / 1000000 / 10000000
	loadvar		rsemkath, module_str
	movi		ralaf, 1
	syscall		%tagha_module_new_from_file ; TaghaModule *temp = tagha_module_new_from_file("test_factorial.tbc");
	st8			[rbp-24], ralaf ; module ptr is in ralaf, copy it to stack
	
	; load return TaghaVal ptr.
	loadaddr	rqof, [rbp-8]
	
	; load array
	movi		rdalath, 5
	st8			[rbp-16], rdalath
	loadaddr	rsadhe, [rbp-16]
	
	; load constant array size
	movi		rpeh, 1
	; load string of function we want to execute.
	loadglobal	r_eh, factorial_str
	; copy the module ptr to register semkath.
	ld8			rsemkath, [rbp-24]
	
	movi		rheh, 0
	
	; test dynamic loading function invocation overhead
.loop:
	movi		ralaf, 5
	syscall		%tagha_module_call ; tagha_module_call(module, "factorial", 1, &(union TaghaVal){5}, &val);
	dec			rbeth
	cmp			rbeth, rheh
	jz			.loop
	
	loadaddr	rsemkath, [rbp-24]
	movi		ralaf, 1
	syscall		%tagha_module_free ; tagha_module_free(&module);
	ld8			ralaf, [rbp-8]
	ret
}
