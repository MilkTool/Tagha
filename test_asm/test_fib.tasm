%main: {
    movi    rarg0, 34
    call    %fib
.exit:
    ret
}

; O(2^n) algorithm
; int fib(const int n) {
;     return (n<2) ? n : fib(n-1)+fib(n-2);
; }

%fib: {
    movi    r2, 16
    movi    r4, 1
    sub     rsp, r2
    push    r1
    st4     [rbp-4], rarg0
    movi    r3, 2
    
    ilt     rarg0, r3 ; if( n<2 )
    jz      .eval
    
.exit:
    ld4     r0, [rbp-4]
    ret
    
.eval:
; return fib(n-1) + fib(n-2);
    ; fib(n-1)
    ld4     r0, [rbp-4]
    sub     r0, r4
    mov     rarg0, r0
    call    %fib
    
    mov     r1, r0
    ; fib(n-2)
    ld4     r0, [rbp-4]
    sub     r0, r3
    mov     rarg0, r0
    call    %fib
    ; +
    add     r0, r1
    pop     r1
    ret
}
